# üìö Les dictionnaires en Python

# Exemple simple de dictionnaire :
personne = {
    "nom": "Alice",
    "√¢ge": 30,
    "ville": "Paris"
}

# 1. Afficher le dictionnaire complet
print(personne)  # {'nom': 'Alice', '√¢ge': 30, 'ville': 'Paris'}

# 2. Acc√©der √† une valeur via sa cl√©
print(personne["nom"])  # "Alice"

# 3. Modifier une valeur
personne["√¢ge"] = 31
print(personne["√¢ge"])  # 31

# 4. Ajouter une nouvelle paire cl√©/valeur
personne["profession"] = "D√©veloppeuse"
print(personne)

# 5. Supprimer une paire cl√©/valeur
del personne["ville"]
print(personne)

# 6. V√©rifier si une cl√© existe dans le dictionnaire
print("nom" in personne)       # True
print("ville" in personne)     # False

# 7. Obtenir toutes les cl√©s, valeurs ou paires items
print(personne.keys())    # dict_keys(['nom', '√¢ge', 'profession'])
print(personne.values())  # dict_values(['Alice', 31, 'D√©veloppeuse'])
print(personne.items())   # dict_items([('nom', 'Alice'), ('√¢ge', 31), ('profession', 'D√©veloppeuse')])

# 8. Utiliser la m√©thode get() pour acc√©der √† une valeur sans g√©n√©rer d'erreur
print(personne.get("ville"))             # None (au lieu d‚Äôerreur si la cl√© n‚Äôexiste pas)
print(personne.get("ville", "Inconnue"))  # "Inconnue" si la cl√© n‚Äôexiste pas

# 9. Vider le dictionnaire
personne.clear()
print(personne)  # {}

# 10. copy() : cr√©e une copie ind√©pendante du dictionnaire
personne = {
    "nom": "Alice",
    "√¢ge": 31,
    "profession": "D√©veloppeuse"
}
copie = personne.copy()
print(copie)

# 11. update() : met √† jour le dictionnaire avec un autre dictionnaire ou des paires cl√©-valeur
personne.update({"ville": "Lyon", "√¢ge": 32})
print(personne)

# 12. pop() : supprime une cl√© et retourne sa valeur
age = personne.pop("√¢ge")
print(f"√Çge supprim√© : {age}")
print(personne)

# 13. popitem() : supprime et retourne la derni√®re paire cl√©-valeur (Python 3.7+)
dernier = personne.popitem()
print(f"Derni√®re paire supprim√©e : {dernier}")
print(personne)
